//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_sum_float64(SB), $0-24

	MOVQ buf+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ res+16(FP), DX

	WORD $0xf685             // test    esi, esi
	JLE  LBB0_1
	WORD $0xf089             // mov    eax, esi
	WORD $0xfe83; BYTE $0x1f // cmp    esi, 31
	JA   LBB0_6
	LONG $0xc057f9c5         // vxorpd    xmm0, xmm0, xmm0
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	JMP  LBB0_4

LBB0_1:
	LONG $0xc057f8c5 // vxorps    xmm0, xmm0, xmm0
	LONG $0x0211fbc5 // vmovsd    qword [rdx], xmm0
	VZEROUPPER
	RET

LBB0_6:
	WORD $0x8941; BYTE $0xc0                   // mov    r8d, eax
	LONG $0xe0e08341                           // and    r8d, -32
	LONG $0xe0708d49                           // lea    rsi, [r8 - 32]
	WORD $0x8948; BYTE $0xf1                   // mov    rcx, rsi
	LONG $0x05e9c148                           // shr    rcx, 5
	LONG $0x01498d44                           // lea    r9d, [rcx + 1]
	LONG $0x07e18341                           // and    r9d, 7
	LONG $0xe0fe8148; WORD $0x0000; BYTE $0x00 // cmp    rsi, 224
	JAE  LBB0_8
	LONG $0xc057f9c5                           // vxorpd    xmm0, xmm0, xmm0
	WORD $0xc931                               // xor    ecx, ecx
	LONG $0xc957f1c5                           // vxorpd    xmm1, xmm1, xmm1
	LONG $0xd257e9c5                           // vxorpd    xmm2, xmm2, xmm2
	LONG $0xdb57e1c5                           // vxorpd    xmm3, xmm3, xmm3
	LONG $0xe457d9c5                           // vxorpd    xmm4, xmm4, xmm4
	LONG $0xed57d1c5                           // vxorpd    xmm5, xmm5, xmm5
	LONG $0xf657c9c5                           // vxorpd    xmm6, xmm6, xmm6
	LONG $0xff57c1c5                           // vxorpd    xmm7, xmm7, xmm7
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JNE  LBB0_11
	JMP  LBB0_13

LBB0_8:
	LONG $0xff718d49         // lea    rsi, [r9 - 1]
	WORD $0x2948; BYTE $0xce // sub    rsi, rcx
	LONG $0xc057f9c5         // vxorpd    xmm0, xmm0, xmm0
	WORD $0xc931             // xor    ecx, ecx
	LONG $0xc957f1c5         // vxorpd    xmm1, xmm1, xmm1
	LONG $0xd257e9c5         // vxorpd    xmm2, xmm2, xmm2
	LONG $0xdb57e1c5         // vxorpd    xmm3, xmm3, xmm3
	LONG $0xe457d9c5         // vxorpd    xmm4, xmm4, xmm4
	LONG $0xed57d1c5         // vxorpd    xmm5, xmm5, xmm5
	LONG $0xf657c9c5         // vxorpd    xmm6, xmm6, xmm6
	LONG $0xff57c1c5         // vxorpd    xmm7, xmm7, xmm7

LBB0_9:
	QUAD $0x0000e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 224]
	QUAD $0x0000c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 192]
	QUAD $0x0000a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 160]
	QUAD $0x000080cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 128]
	LONG $0x5c58e5c5; WORD $0x60cf             // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 96]
	LONG $0x5458edc5; WORD $0x40cf             // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 64]
	LONG $0x4c58f5c5; WORD $0x20cf             // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 32]
	LONG $0x0458fdc5; BYTE $0xcf               // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx]
	QUAD $0x000100cf8458fdc5; BYTE $0x00       // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx + 256]
	QUAD $0x000120cf8c58f5c5; BYTE $0x00       // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 288]
	QUAD $0x000140cf9458edc5; BYTE $0x00       // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 320]
	QUAD $0x000160cf9c58e5c5; BYTE $0x00       // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 352]
	QUAD $0x000180cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 384]
	QUAD $0x0001a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 416]
	QUAD $0x0001c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 448]
	QUAD $0x0001e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 480]
	QUAD $0x0002e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 736]
	QUAD $0x0002c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 704]
	QUAD $0x0002a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 672]
	QUAD $0x000280cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 640]
	QUAD $0x000260cf9c58e5c5; BYTE $0x00       // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 608]
	QUAD $0x000240cf9458edc5; BYTE $0x00       // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 576]
	QUAD $0x000220cf8c58f5c5; BYTE $0x00       // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 544]
	QUAD $0x000200cf8458fdc5; BYTE $0x00       // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx + 512]
	QUAD $0x000300cf8458fdc5; BYTE $0x00       // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx + 768]
	QUAD $0x000320cf8c58f5c5; BYTE $0x00       // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 800]
	QUAD $0x000340cf9458edc5; BYTE $0x00       // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 832]
	QUAD $0x000360cf9c58e5c5; BYTE $0x00       // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 864]
	QUAD $0x000380cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 896]
	QUAD $0x0003a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 928]
	QUAD $0x0003c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 960]
	QUAD $0x0003e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 992]
	QUAD $0x0004e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 1248]
	QUAD $0x0004c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 1216]
	QUAD $0x0004a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 1184]
	QUAD $0x000480cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 1152]
	QUAD $0x000460cf9c58e5c5; BYTE $0x00       // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 1120]
	QUAD $0x000440cf9458edc5; BYTE $0x00       // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 1088]
	QUAD $0x000420cf8c58f5c5; BYTE $0x00       // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 1056]
	QUAD $0x000400cf8458fdc5; BYTE $0x00       // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx + 1024]
	QUAD $0x000500cf8458fdc5; BYTE $0x00       // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx + 1280]
	QUAD $0x000520cf8c58f5c5; BYTE $0x00       // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 1312]
	QUAD $0x000540cf9458edc5; BYTE $0x00       // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 1344]
	QUAD $0x000560cf9c58e5c5; BYTE $0x00       // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 1376]
	QUAD $0x000580cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 1408]
	QUAD $0x0005a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 1440]
	QUAD $0x0005c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 1472]
	QUAD $0x0005e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 1504]
	QUAD $0x0006e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 1760]
	QUAD $0x0006c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 1728]
	QUAD $0x0006a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 1696]
	QUAD $0x000680cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 1664]
	QUAD $0x000660cf9c58e5c5; BYTE $0x00       // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 1632]
	QUAD $0x000640cf9458edc5; BYTE $0x00       // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 1600]
	QUAD $0x000620cf8c58f5c5; BYTE $0x00       // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 1568]
	QUAD $0x000600cf8458fdc5; BYTE $0x00       // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx + 1536]
	QUAD $0x000700cf8458fdc5; BYTE $0x00       // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx + 1792]
	QUAD $0x000720cf8c58f5c5; BYTE $0x00       // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 1824]
	QUAD $0x000740cf9458edc5; BYTE $0x00       // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 1856]
	QUAD $0x000760cf9c58e5c5; BYTE $0x00       // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 1888]
	QUAD $0x000780cfa458ddc5; BYTE $0x00       // vaddpd    ymm4, ymm4, yword [rdi + 8*rcx + 1920]
	QUAD $0x0007a0cfac58d5c5; BYTE $0x00       // vaddpd    ymm5, ymm5, yword [rdi + 8*rcx + 1952]
	QUAD $0x0007c0cfb458cdc5; BYTE $0x00       // vaddpd    ymm6, ymm6, yword [rdi + 8*rcx + 1984]
	QUAD $0x0007e0cfbc58c5c5; BYTE $0x00       // vaddpd    ymm7, ymm7, yword [rdi + 8*rcx + 2016]
	LONG $0x00c18148; WORD $0x0001; BYTE $0x00 // add    rcx, 256
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB0_9
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB0_13

LBB0_11:
	LONG $0xcf0c8d48         // lea    rcx, [rdi + 8*rcx]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB0_12:
	LONG $0x0158fdc5                           // vaddpd    ymm0, ymm0, yword [rcx]
	LONG $0x4958f5c5; BYTE $0x20               // vaddpd    ymm1, ymm1, yword [rcx + 32]
	LONG $0x5158edc5; BYTE $0x40               // vaddpd    ymm2, ymm2, yword [rcx + 64]
	LONG $0x5958e5c5; BYTE $0x60               // vaddpd    ymm3, ymm3, yword [rcx + 96]
	QUAD $0x00000080a158ddc5                   // vaddpd    ymm4, ymm4, yword [rcx + 128]
	QUAD $0x000000a0a958d5c5                   // vaddpd    ymm5, ymm5, yword [rcx + 160]
	QUAD $0x000000c0b158cdc5                   // vaddpd    ymm6, ymm6, yword [rcx + 192]
	QUAD $0x000000e0b958c5c5                   // vaddpd    ymm7, ymm7, yword [rcx + 224]
	LONG $0x00c18148; WORD $0x0001; BYTE $0x00 // add    rcx, 256
	LONG $0x01c18349                           // add    r9, 1
	JNE  LBB0_12

LBB0_13:
	LONG $0xd658edc5               // vaddpd    ymm2, ymm2, ymm6
	LONG $0xc458fdc5               // vaddpd    ymm0, ymm0, ymm4
	LONG $0xc258fdc5               // vaddpd    ymm0, ymm0, ymm2
	LONG $0xd758e5c5               // vaddpd    ymm2, ymm3, ymm7
	LONG $0xcd58f5c5               // vaddpd    ymm1, ymm1, ymm5
	LONG $0xca58f5c5               // vaddpd    ymm1, ymm1, ymm2
	LONG $0xc158fdc5               // vaddpd    ymm0, ymm0, ymm1
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc158fdc5               // vaddpd    ymm0, ymm0, ymm1
	LONG $0xc07cfdc5               // vhaddpd    ymm0, ymm0, ymm0
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JE   LBB0_14

LBB0_4:
	LONG $0xc70c8d4a         // lea    rcx, [rdi + 8*r8]
	WORD $0x294c; BYTE $0xc0 // sub    rax, r8

LBB0_5:
	LONG $0x0158fbc5 // vaddsd    xmm0, xmm0, qword [rcx]
	LONG $0x08c18348 // add    rcx, 8
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_5

LBB0_14:
	LONG $0x0211fbc5         // vmovsd    qword [rdx], xmm0
	WORD $0x8948; BYTE $0xec // mov    rsp, rbp
	BYTE $0x5d               // pop    rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

.Lfunc_end0:
	.size sum_float64, .Lfunc_end0-sum_float64

	.ident   "Apple LLVM version 10.0.0 (clang-1000.10.44.4)"
	.section ".note.GNU-stack", "", @progbits

